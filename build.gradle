plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'de.maxhenkel.opus4j'
archivesBaseName = 'opus4j'
version = library_version

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation platform("org.junit:junit-bom:${junit_version}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.platform:junit-platform-launcher'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude '**/*.gitkeep'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Opus4J'
                description = 'Opus Wrapper for Java'
                url = 'https://maxhenkel.de'
            }
        }
    }
    repositories {
        maven {
            name = 'henkelmax.public'
            url = uri('https://maven.maxhenkel.de/repository/public')
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}

tasks.register('buildNativesWindows', Exec) {
    group = 'other'
    workingDir = layout.projectDirectory.dir('native/build')

    doFirst {
        def buildDir = file('native/build')
        if (buildDir.exists()) {
            logger.lifecycle("Cleaning build directory: $buildDir")
            project.delete(fileTree(dir: buildDir))
        } else {
            logger.lifecycle("Creating build directory: $buildDir")
            buildDir.mkdirs()
        }
    }
    commandLine 'cmd', '/c', 'cmake -DCMAKE_TOOLCHAIN_FILE="../cmake/zig-x86_64-windows-gnu.cmake" .. -DCMAKE_BUILD_TYPE=Release -G Ninja && cmake --build . --config Release'
}

tasks.register('generateNativesWindows', Copy) {
    group = 'build'

    dependsOn 'buildNativesWindows'

    from 'native/build/libopus4j.dll'
    into 'src/main/resources/natives/windows-x64'
}
